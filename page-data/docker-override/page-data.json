{"componentChunkName":"component---src-templates-post-js","path":"/docker-override","result":{"data":{"markdownRemark":{"html":"<p>An inherent problem I've ran into at my day job is the necessity to point to different versions of images. Ideally, these images would be tagged, so we could, say, point to each image of a release, or timestamp, or a build. Currently, they don't do that (priorities of different groups, and all that).</p>\n<p>To offset local development needs, another co-worker pointed out in the past his prior teams had used <a href=\"https://docs.docker.com/compose/extends/\">docker override files</a> to accomplish this task. I'm all about automation and offloading tweaks and convenience fixes to configuration files, so this was right up my alley.</p>\n<h2>The initial problem</h2>\n<p>My local docker environment was pointing to the <code class=\"language-text\">:latest</code> docker images. Some code I relied on lived in the <code class=\"language-text\">:develop</code> images. Let's not talk about the path that lead to this discovery, lots of messages and conversations ensued to figure this out.</p>\n<h2>Inital tasks</h2>\n<p>I read up on extending the <a href=\"https://docs.docker.com/compose/extends/\">docker-compose file</a>. From there, I copied our original <code class=\"language-text\">docker-compose.yml</code> into <code class=\"language-text\">docker-compose.override.yml</code> and adjusted the <code class=\"language-text\">docker-container.image</code> to point from <code class=\"language-text\">:latest</code> to <code class=\"language-text\">:develop</code>. Most importantly - I knew not every image file needed to be pointing to <code class=\"language-text\">:develop</code>, so only those files were changed.</p>\n<p>Dead easy.</p>\n<p>To get up and running, I didn't need to do any configuration changes, no command line arguemnts. It was handled by following the established convention that docker looks for the <code class=\"language-text\">override.yml</code> and uses it if present.</p>\n<p>I brought the containers up - and my original problem I was trying to solved - was complete! I was back in <code class=\"language-text\">development</code> again!</p>\n<p>NOTE: <em>To start a normal environment run <code class=\"language-text\">docker-compose up -f docker-compose.yml</code></em> - this will skip the <code class=\"language-text\">docker-compose.override.yml</code> file!</p>\n<h2>First mistakes</h2>\n<p>I didn't think it through - I copied the <em>entire</em> file. I was worried it would drop certain properties. This was unnecessary, and creates a maintenance issue - if they change a property in the main <code class=\"language-text\">docker-compose.yml</code> mine would override it! So I pruned the <code class=\"language-text\">docker-compose.override.yml</code> down to the bare minimums - just the <code class=\"language-text\">image:</code> paths pointing to <code class=\"language-text\">:develop</code></p>\n<p>Through my pairing down, I also discovered that they look at the <code class=\"language-text\">version: x.x</code> number in both files - if they don't match, it'll throw an error and fail.</p>\n<p>Now, as we've moved forward, there's been talk of additional <code class=\"language-text\">docker-compose</code> files being necessary. And no one wants to maintain their local <code class=\"language-text\">docker-compose.yml</code> file and change which image it posts to, and not accidentally commit those changes. No matter how rad a developer you are - accidents happen, and we want to minimize the ownership of the group of people who might accidentally break that file.</p>\n<h2>Additional compose files</h2>\n<p>This gives birth to additional <code class=\"language-text\">docker-compose.whatever.yml</code> files! So we can (in the future) point to different environments or snapshots and execute them via: <code class=\"language-text\">docker-compose -f docker-compose.yml -f docker-compose.prod.yml up</code></p>\n<h3>What does <code class=\"language-text\">-f</code> do?</h3>\n<p>From the <a href=\"https://docs.docker.com/compose/reference/overview/\">docker docs</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Options:\n  -f, --file FILE             Specify an alternate compose file\n                              (default: docker-compose.yml)</code></pre></div>\n<p><code class=\"language-text\">docker-compose</code> runs with <code class=\"language-text\">docker-compose.yml</code> and <code class=\"language-text\">docker-compose.override.yml</code>\n<code class=\"language-text\">docker-compose -f</code> says “don’t do that, use this file” or in the case of multiple <code class=\"language-text\">-f</code> bombs, “use these files” (take note - each <code class=\"language-text\">.yml</code> file has to be preceded by a <code class=\"language-text\">-f</code>, a la <code class=\"language-text\">-f docker-compose.yml -f docker-compose.release.yml</code>).</p>\n<p>If you have a <code class=\"language-text\">docker-compose.override.yml</code> and you don't want to deal with removing it/stashing it - you can make it ignored on execution by running <code class=\"language-text\">docker-compose -f docker-compose.yml</code> (or whatever <code class=\"language-text\">.yml</code> file you want).</p>","timeToRead":3,"frontmatter":{"path":"/docker-override","title":"Docker Override - extending your docker-compose","date":"14th February, 2019.","category":"Code"}}},"pageContext":{}}}