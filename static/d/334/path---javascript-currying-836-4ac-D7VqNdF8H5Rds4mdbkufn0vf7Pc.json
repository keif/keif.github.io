{"data":{"markdownRemark":{"html":"<p>On the Slack group <a href=\"//talk-fed.slack.com\">Talk Front-End Development</a> there was a brief conversation about JavaScript Currying I felt was worth sharing:</p>\n<blockquote>\n<p>a [2:45 PM]\nTIL about currying, but I can’t see a practical example. Can anyone explain why it’s beneficial?\nTigran [3:28 PM]\n@a Currying is one of those things that you’ll know when you need it as long as you keep its existence in mind.\nIf you’re familiar with <code class=\"language-text\">react-redux</code>, it has a <code class=\"language-text\">connect</code> HOC is used liked so:\n<code class=\"language-text\">connect(mapStateToProps)(SomeComponent)</code></p>\n<p>Its implementation might look like something like this:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">connect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mstp<span class=\"token punctuation\">,</span> mdtp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Component <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> someNewProps <span class=\"token operator\">=</span> <span class=\"token function\">mstp</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function-variable function\">NewComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span>…someNewProps<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>…props<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token template-string\"><span class=\"token string\">``</span></span><span class=\"token template-string\"><span class=\"token string\">`\n> (edited)\n> It takes the first argument, retrieves some data from it, and passes into the Component which is the second argument.\n> \n> teslanick [3:50 PM]\n> @a There’s a subtle distinction between what is commonly meant by currying—which is usually a slightly different concept > called _partial application_—and its actual mathematical meaning\n> Most of the time the difference is unimportant. But imagine a function that cyphers letters: you give it an offset, _o_ and a letter, and the output is a letter _o_ places away from the input letter.\n> So `</span></span><span class=\"token function\">cypher</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token string\">` would return `</span></span><span class=\"token constant\">B</span><span class=\"token template-string\"><span class=\"token string\">`. `</span></span><span class=\"token function\">cypher</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token string\">` would return `</span></span><span class=\"token constant\">A</span><span class=\"token template-string\"><span class=\"token string\">` (edited) \n> You can partially apply this function (usually synonymous with currying) by “binding” the first argument to a value. In JS you can do this with `</span></span><span class=\"token punctuation\">.</span>bind<span class=\"token template-string\"><span class=\"token string\">`: `</span></span>cypher<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token string\">` will return a function where the first argument is _always_ `</span></span><span class=\"token number\">1</span><span class=\"token template-string\"><span class=\"token string\">`.\n> (the `</span></span><span class=\"token keyword\">null</span><span class=\"token template-string\"><span class=\"token string\">` argument to `</span></span><span class=\"token punctuation\">.</span>bind<span class=\"token template-string\"><span class=\"token string\">` is used to re-bind `</span></span><span class=\"token keyword\">this</span><span class=\"token template-string\"><span class=\"token string\">` and probably should be avoided)\n> Ok. Putting the two ideas together: our cypher function and partial application.\n> If we have a string of letters that we want to cypher, we could do:\n> `</span></span><span class=\"token template-string\"><span class=\"token string\">``</span></span><span class=\"token string\">\"FRIENDS, ROMANS, COUNTRYMAN, LEND ME YOUR EARS\"</span>\n<span class=\"token operator\">></span>   <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// split into individual characters</span>\n<span class=\"token operator\">></span>   <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isALetter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remove characters that aren't letters, because you can't cypher commas etc</span>\n<span class=\"token operator\">></span>   <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>cypher<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cypher every letter in the string</span>\n<span class=\"token operator\">></span>   <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// return it to a string```</span>\n<span class=\"token operator\">></span> Which would <span class=\"token keyword\">return</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">></span> <span class=\"token template-string\"><span class=\"token string\">``</span></span><span class=\"token template-string\"><span class=\"token string\">`\"GSJFOETSPNBOTDPVOUSZNFOMFOENFZPVSFBST\"`</span></span><span class=\"token template-string\"><span class=\"token string\">``</span></span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>edited<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> Which is the input string cyphered to the right by one place<span class=\"token punctuation\">.</span> <span class=\"token constant\">F</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token constant\">G</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> etc<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">></span> But we could create many different cyphers <span class=\"token keyword\">with</span> different offsets\n<span class=\"token operator\">></span> Ok<span class=\"token punctuation\">,</span> that’s partial application<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">></span> Currying is just a _tiny_ bit different<span class=\"token punctuation\">.</span> When we have a pure <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> we have a mapping <span class=\"token keyword\">from</span> one value<span class=\"token operator\">-</span>space to another value<span class=\"token operator\">-</span>space<span class=\"token punctuation\">.</span> So <span class=\"token keyword\">if</span> you have a <span class=\"token keyword\">function</span> that takes a number and turns it into a color<span class=\"token punctuation\">,</span> and every number corresponds to a color<span class=\"token punctuation\">,</span> you’ve created a mapping <span class=\"token keyword\">from</span> one value<span class=\"token operator\">-</span><span class=\"token function\">space</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> to <span class=\"token function\">another</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">></span> If you ignore what’s _in_ the <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> you could replace it <span class=\"token keyword\">with</span> a lookup table<span class=\"token punctuation\">:</span> Pass <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> you <span class=\"token keyword\">get</span> red<span class=\"token punctuation\">,</span> pass <span class=\"token keyword\">in</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> you <span class=\"token keyword\">get</span> green<span class=\"token punctuation\">,</span> and there’s just a big list <span class=\"token keyword\">of</span> numbers to colors somewhere <span class=\"token keyword\">in</span> your program<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">></span> When you have a pure <span class=\"token keyword\">function</span> <span class=\"token keyword\">of</span> two or more arguments<span class=\"token punctuation\">,</span> you have a multi<span class=\"token operator\">-</span>dimensional mapping<span class=\"token punctuation\">.</span> You’re mapping <span class=\"token keyword\">from</span> one “space” <span class=\"token keyword\">of</span> _n_ coordinates to another “space” <span class=\"token keyword\">of</span> at least _n_ coordinates<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">></span> Currying is the computer science way to collapse those _n_ dimensional spaces down to _n<span class=\"token operator\">-</span><span class=\"token number\">1</span>_ dimensional spaces<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">></span> In the <span class=\"token keyword\">case</span> <span class=\"token keyword\">of</span> our cypher <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> we have a two<span class=\"token operator\">-</span>dimensional <span class=\"token function\">space</span> <span class=\"token punctuation\">(</span>numeric offsets<span class=\"token punctuation\">,</span> letters<span class=\"token punctuation\">)</span> and we collapse it to a one<span class=\"token operator\">-</span>dimensional one by fixing the first argument to be <span class=\"token number\">1.</span>\n<span class=\"token operator\">></span> This has interesting mathematical implications that <span class=\"token constant\">I</span> don’t really understand that have to <span class=\"token keyword\">do</span> <span class=\"token keyword\">with</span> <span class=\"token keyword\">set</span> theories and category theory<span class=\"token punctuation\">.</span></code></pre></div>","timeToRead":2,"frontmatter":{"path":"/javascript-currying","title":"JavaScript Currying: Explained","date":"18th February, 2019.","category":"Code"}}},"pageContext":{}}