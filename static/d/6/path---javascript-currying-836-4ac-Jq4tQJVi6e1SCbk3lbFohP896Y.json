{"data":{"markdownRemark":{"html":"<p>On the Slack group <a href=\"//talk-fed.slack.com\">Talk Front-End Development</a> there was a brief conversation about JavaScript Currying I felt was worth sharing:</p>\n<blockquote>\n<p>a [2:45 PM]\nTIL about currying, but I can’t see a practical example. Can anyone explain why it’s beneficial?\nTigran [3:28 PM]\n@a Currying is one of those things that you’ll know when you need it as long as you keep its existence in mind.\nIf you’re familiar with <code class=\"language-text\">react-redux</code>, it has a <code class=\"language-text\">connect</code> HOC is used liked so:\n<code class=\"language-text\">connect(mapStateToProps)(SomeComponent)</code></p>\n<p>Its implementation might look like something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"></code></pre></div>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const connect = (mstp, mdtp) =&gt; Component =&gt; {</code></pre></div>\n<blockquote>\n<p> const someNewProps = mstp(state);\nreturn NewComponent = (props) => &#x3C;Component {…someNewProps} {…props}/>\n}`<code class=\"language-text\"></code>\n(edited)\nIt takes the first argument, retrieves some data from it, and passes into the Component which is the second argument.</p>\n<p>teslanick [3:50 PM]\n@a There’s a subtle distinction between what is commonly meant by currying—which is usually a slightly different concept > called <em>partial application</em>—and its actual mathematical meaning\nMost of the time the difference is unimportant. But imagine a function that cyphers letters: you give it an offset, <em>o</em> and a letter, and the output is a letter <em>o</em> places away from the input letter.\nSo <code class=\"language-text\">cypher(1, &#39;A&#39;)</code> would return <code class=\"language-text\">B</code>. <code class=\"language-text\">cypher(1, &#39;Z&#39;)</code> would return <code class=\"language-text\">A</code> (edited)\nYou can partially apply this function (usually synonymous with currying) by “binding” the first argument to a value. In JS you can do this with <code class=\"language-text\">.bind</code>: <code class=\"language-text\">cypher.bind(null, 1)</code> will return a function where the first argument is <em>always</em> <code class=\"language-text\">1</code>.\n(the <code class=\"language-text\">null</code> argument to <code class=\"language-text\">.bind</code> is used to re-bind <code class=\"language-text\">this</code> and probably should be avoided)\nOk. Putting the two ideas together: our cypher function and partial application.\nIf we have a string of letters that we want to cypher, we could do:</p>\n<div class=\"gatsby-highlight\" data-language=\"\"friends, romans, countryman, lend me your ears\"\"><pre class=\"language-\"friends, romans, countryman, lend me your ears\"\"><code class=\"language-\"friends, romans, countryman, lend me your ears\"\">  .split(&#39;&#39;) // split into individual characters\n  .filter(isALetter) // remove characters that aren&#39;t letters, because you can&#39;t cypher commas etc\n  .map(cypher.bind(this, 1)) // cypher every letter in the string\n  .join(&#39;&#39;) // return it to a string```\nWhich would return:\n```&quot;GSJFOETSPNBOTDPVOUSZNFOMFOENFZPVSFBST&quot;```\n(edited)\nWhich is the input string cyphered to the right by one place. F-&gt;G, R-&gt;S, etc.\nBut we could create many different cyphers with different offsets\nOk, that’s partial application.\nCurrying is just a _tiny_ bit different. When we have a pure function, we have a mapping from one value-space to another value-space. So if you have a function that takes a number and turns it into a color, and every number corresponds to a color, you’ve created a mapping from one value-space (number) to another (color).\nIf you ignore what’s _in_ the function, you could replace it with a lookup table: Pass in 1, you get red, pass in 2, you get green, and there’s just a big list of numbers to colors somewhere in your program.\nWhen you have a pure function of two or more arguments, you have a multi-dimensional mapping. You’re mapping from one “space” of _n_ coordinates to another “space” of at least _n_ coordinates.\nCurrying is the computer science way to collapse those _n_ dimensional spaces down to _n-1_ dimensional spaces.\nIn the case of our cypher function: we have a two-dimensional space (numeric offsets, letters) and we collapse it to a one-dimensional one by fixing the first argument to be 1.\nThis has interesting mathematical implications that I don’t really understand that have to do with set theories and category theory.</code></pre></div>\n</blockquote>","timeToRead":3,"frontmatter":{"path":"/javascript-currying","title":"JavaScript Currying: Explained","date":"18th February, 2019.","category":"Code"}}},"pageContext":{}}