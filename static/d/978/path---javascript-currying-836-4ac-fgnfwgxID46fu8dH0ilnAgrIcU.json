{"data":{"markdownRemark":{"html":"<p>Below is a conversation that occured on the #javascript channel on the Slack group <a href=\"talk-fed.slack.com\">Talk Front-End Development</a>:</p>\n<blockquote>\n<p>a [2:45 PM]\nTIL about currying, but I can’t see a practical example. Can anyone explain why it’s beneficial?</p>\n</blockquote>\n<blockquote>\n<p>Tigran [3:28 PM]\n@a Currying is one of those things that you’ll know when you need it as long as you keep its existence in mind.\nIf you’re familiar with <code class=\"language-text\">react-redux</code>, it has a <code class=\"language-text\">connect</code> HOC is used liked so:\n<code class=\"language-text\">connect(mapStateToProps)(SomeComponent)</code></p>\n</blockquote>\n<p>Its implementation might look like something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"const connect = (mstp, mdtp) => component => \"><pre class=\"language-const connect = (mstp, mdtp) => component => \"><code class=\"language-const connect = (mstp, mdtp) => component => \">  const someNewProps = mstp(state);\n  return NewComponent = (props) =&gt; &lt;Component {…someNewProps} {…props}/&gt;\n}```\n(edited)\nIt takes the first argument, retrieves some data from it, and passes into the Component which is the second argument.\n\nteslanick [3:50 PM]\n@a There’s a subtle distinction between what is commonly meant by currying—which is usually a slightly different concept called _partial application_—and its actual mathematical meaning\nMost of the time the difference is unimportant. But imagine a function that cyphers letters: you give it an offset, _o_ and a letter, and the output is a letter _o_ places away from the input letter.\nSo `cypher(1, &#39;A&#39;)` would return `B`. `cypher(1, &#39;Z&#39;)` would return `A` (edited) \nYou can partially apply this function (usually synonymous with currying) by “binding” the first argument to a value. In JS you can do this with `.bind`: `cypher.bind(null, 1)` will return a function where the first argument is _always_ `1`.\n(the `null` argument to `.bind` is used to re-bind `this` and probably should be avoided)\nOk. Putting the two ideas together: our cypher function and partial application.\nIf we have a string of letters that we want to cypher, we could do:\n```&quot;FRIENDS, ROMANS, COUNTRYMAN, LEND ME YOUR EARS&quot;\n  .split(&#39;&#39;) // split into individual characters\n  .filter(isALetter) // remove characters that aren&#39;t letters, because you can&#39;t cypher commas etc\n  .map(cypher.bind(this, 1)) // cypher every letter in the string\n  .join(&#39;&#39;) // return it to a string```\nWhich would return:\n```&quot;GSJFOETSPNBOTDPVOUSZNFOMFOENFZPVSFBST&quot;```\n(edited)\nWhich is the input string cyphered to the right by one place. F-&gt;G, R-&gt;S, etc.\nBut we could create many different cyphers with different offsets\nOk, that’s partial application.\nCurrying is just a _tiny_ bit different. When we have a pure function, we have a mapping from one value-space to another value-space. So if you have a function that takes a number and turns it into a color, and every number corresponds to a color, you’ve created a mapping from one value-space (number) to another (color).\nIf you ignore what’s _in_ the function, you could replace it with a lookup table: Pass in 1, you get red, pass in 2, you get green, and there’s just a big list of numbers to colors somewhere in your program.\nWhen you have a pure function of two or more arguments, you have a multi-dimensional mapping. You’re mapping from one “space” of _n_ coordinates to another “space” of at least _n_ coordinates.\nCurrying is the computer science way to collapse those _n_ dimensional spaces down to _n-1_ dimensional spaces.\nIn the case of our cypher function: we have a two-dimensional space (numeric offsets, letters) and we collapse it to a one-dimensional one by fixing the first argument to be 1.\nThis has interesting mathematical implications that I don’t really understand that have to do with set theories and category theory.</code></pre></div>","timeToRead":2,"frontmatter":{"path":"/javascript-currying","title":"JavaScript Currying: Explained","date":"18th February, 2019.","category":"Code"}}},"pageContext":{}}