{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Source: Copied here for posterity. Summary Answer to the question: \"What is Testivus' wisdom concerning the proper percentage of test coverage?\"\nReferring to \"The Way of Testivus\" entry: http://www.artima.com/weblogs/viewpost.jsp?thread=203994 Morgan Conrad asked: \"What is Testivus' wisdom concerning the proper percentage of test coverage?\" Here you go Morgan. Testivus On Test Coverage Early one…","id":"cd00451d-2042-5846-a114-e2719355d8f9","frontmatter":{"title":"What is Testivus' wisdom concerning the proper percentage of test coverage?","path":"/testivus-wisdom-of-test-coverage","published":true,"date":"22nd January, 2019."}}},{"node":{"excerpt":"On the Slack group  Talk Front-End Development  there was a brief conversation about JavaScript Currying I felt was worth sharing (some editing from the original conversation between @a, @Tigran, and @TeslaNick for brevity): TIL about currying, but I can’t see a practical example. Can anyone explain why it’s beneficial? Currying is one of those things that you’ll know when you need it as long as…","id":"645fedff-e508-52fc-9079-34b24f597949","frontmatter":{"title":"JavaScript Currying: Explained","path":"/javascript-currying","published":true,"date":"18th February, 2019."}}},{"node":{"excerpt":"An inherent problem I've ran into at my day job is the necessity to point to different versions of images. Ideally, these images would be tagged, so we could, say, point to each image of a release, or timestamp, or a build. Currently, they don't do that (priorities of different groups, and all that). To offset local development needs, another co-worker pointed out in the past his prior teams had…","id":"b7af5f32-6fb6-5725-8210-1a990edb788b","frontmatter":{"title":"Docker Override - extending your docker-compose","path":"/docker-override","published":true,"date":"14th February, 2019."}}},{"node":{"excerpt":"A reoccuring problem I run into at work is handling multiple branches on a dev environment comprised of Java, JavaScript, SQL, and SCSS files. It's not an ideal scenario, but utilizing Jenkins, the task is fairly easy in the pipeline - you list the branches you want built, you tell it to deploy (or on a schedule) and it runs through and confirms there is no merge conflicts, before continuing on…","id":"de755cdd-4aa2-5d97-aebd-951b570acb9e","frontmatter":{"title":"Bash Script - test merge conflicts","path":"/bash-script-test-merge-conflicts","published":true,"date":"13th January, 2019."}}},{"node":{"excerpt":"In an effort to document the amount of code I find myself working on, and to create a better, more organized effort to keep code snippets, code examples, recipes, etc. in an easy to search format - I’ve returned to blogging. After this final commit of this page, I will possibly leave it “as-is” and move forward with adjusted entries for historical purposes (or not, who knows?) I opted for Gatsby…","id":"d2eaca5c-8aa5-5b3b-a043-3ae7ff36c19d","frontmatter":{"title":"Zero Day - Getting It Going","path":"/zero-day","published":true,"date":"12th January, 2019."}}}]}},"pageContext":{}}