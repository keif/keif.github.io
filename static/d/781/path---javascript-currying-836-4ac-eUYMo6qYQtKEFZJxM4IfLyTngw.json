{"data":{"markdownRemark":{"html":"<p>On the Slack group <a href=\"//talk-fed.slack.com\">Talk Front-End Development</a> there was a brief conversation about JavaScript Currying I felt was worth sharing:</p>\n<blockquote>\n<p>a [2:45 PM] TIL about currying, but I can’t see a practical example. Can anyone explain why it’s beneficial?</p>\n<p>Tigran [3:28 PM] @a Currying is one of those things that you’ll know when you need it as long as you keep its existence in mind.</p>\n<p>If you’re familiar with <code class=\"language-text\">react-redux</code>, it has a <code class=\"language-text\">connect</code> HOC is used liked so:</p>\n<p><code class=\"language-text\">connect(mapStateToProps)(SomeComponent)</code></p>\n<p>Its implementation might look like something like this:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">connect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mstp<span class=\"token punctuation\">,</span> mdtp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Component <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> someNewProps <span class=\"token operator\">=</span> <span class=\"token function\">mstp</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function-variable function\">NewComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span>…someNewProps<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>…props<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>(edited)</p>\n<p>It takes the first argument, retrieves some data from it, and passes into the Component which is the second argument.</p>\n<p>teslanick [3:50 PM]</p>\n<p>@a There’s a subtle distinction between what is commonly meant by currying—which is usually a slightly different concept >\ncalled <em>partial application</em>—and its actual mathematical meaning</p>\n<p>Most of the time the difference is unimportant. But imagine a function that cyphers letters: you give it an offset, <em>o</em> and a letter, and the output is a letter <em>o</em> places away from the input letter.</p>\n<p>So <code class=\"language-text\">cypher(1, &#39;A&#39;)</code> would return <code class=\"language-text\">B</code>. <code class=\"language-text\">cypher(1, &#39;Z&#39;)</code> would return <code class=\"language-text\">A</code> (edited) </p>\n<p>You can partially apply this function (usually synonymous with currying) by “binding” the first argument to a value. In JS you can do this with <code class=\"language-text\">.bind</code>: <code class=\"language-text\">cypher.bind(null, 1)</code> will return a function where the first argument is <em>always</em> <code class=\"language-text\">1</code>.</p>\n<p>(the <code class=\"language-text\">null</code> argument to <code class=\"language-text\">.bind</code> is used to re-bind <code class=\"language-text\">this</code> and probably should be avoided)</p>\n<p>Ok. Putting the two ideas together: our cypher function and partial application.</p>\n<p>If we have a string of letters that we want to cypher, we could do:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token string\">\"FRIENDS, ROMANS, COUNTRYMAN, LEND ME YOUR EARS\"</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// split into individual characters</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isALetter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// remove characters that aren't letters, because you can't cypher commas etc</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>cypher<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cypher every letter in the string</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// return it to a string</span></code></pre></div>\n<blockquote>\n<p>Which would return:\n<code class=\"language-text\">&quot;GSJFOETSPNBOTDPVOUSZNFOMFOENFZPVSFBST&quot;</code></p>\n<p>Which is the input string cyphered to the right by one place. F->G, R->S, etc.</p>\n<p>But we could create many different cyphers with different offsets</p>\n<p>Ok, that’s partial application.</p>\n<p>Currying is just a <em>tiny</em> bit different. When we have a pure function, we have a mapping from one value-space to another value-space. So if you have a function that takes a number and turns it into a color, and every number corresponds to a color, you’ve created a mapping from one value-space (number) to another (color).</p>\n<p>If you ignore what’s <em>in</em> the function, you could replace it with a lookup table: Pass in 1, you get red, pass in 2, you get green, and there’s just a big list of numbers to colors somewhere in your program.</p>\n<p>When you have a pure function of two or more arguments, you have a multi-dimensional mapping. You’re mapping from one “space” of <em>n</em> coordinates to another “space” of at least <em>n</em> coordinates.</p>\n<p>Currying is the computer science way to collapse those <em>n</em> dimensional spaces down to <em>n-1</em> dimensional spaces.</p>\n<p>In the case of our cypher function: we have a two-dimensional space (numeric offsets, letters) and we collapse it to a one-dimensional one by fixing the first argument to be 1.</p>\n<p>This has interesting mathematical implications that I don’t really understand that have to do with set theories and category theory.</p>\n</blockquote>","timeToRead":3,"frontmatter":{"path":"/javascript-currying","title":"JavaScript Currying: Explained","date":"18th February, 2019.","category":"Code"}}},"pageContext":{}}